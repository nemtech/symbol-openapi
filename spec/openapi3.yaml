openapi: 3.0.0
info:
  version: 0.7.17
  title: Catapult REST Endpoints
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Account routes
  - name: Block routes
  - name: Chain routes
  - name: Diagnostic routes
  - name: Mosaic routes
  - name: Namespace routes
  - name: Transaction routes
  - name: Network routes
  - name: Node routes
paths:
  "/account/{accountId}":
    get:
      tags:
        - Account routes
      summary: Get account information
      description: Returns the account information.
      operationId: getAccountInfo
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /account:
    post:
      tags:
        - Account routes
      summary: Get accounts information
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of accounts information.
                items:
                  $ref: "#/components/schemas/AccountInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{publicKey}/transactions":
    get:
      tags:
        - Account routes
      summary: Get confirmed transactions
      description: Gets an array of transactions for which an account is the sender or receiver.
      operationId: transactions
      parameters:
        - $ref: "#/components/parameters/publicKey"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of confirmed transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{publicKey}/transactions/incoming":
    get:
      tags:
        - Account routes
      summary: Get incoming transactions
      description: |
        Gets an array of incoming transactions. A transaction is said to be
        incoming with respect to an account if the account is the recipient of
        the transaction.
      operationId: incomingTransactions
      parameters:
        - $ref: "#/components/parameters/publicKey"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of incoming transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{publicKey}/transactions/outgoing":
    get:
      tags:
        - Account routes
      summary: Get outgoing transactions
      description: Gets an array of outgoing transactions. A transaction is said to be
        outgoing with respect to an account if the account is the sender of the
        transaction.
      operationId: outgoingTransactions
      parameters:
        - $ref: "#/components/parameters/publicKey"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of outgoing transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{publicKey}/transactions/unconfirmed":
    get:
      tags:
        - Account routes
      summary: Get unconfirmed transactions
      description: |
        Gets the array of transactions not included in a block where an account
        is the sender or receiver.
      operationId: unconfirmedTransactions
      parameters:
        - $ref: "#/components/parameters/publicKey"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of unconfirmed transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{publicKey}/transactions/partial":
    get:
      tags:
        - Account routes
      summary: Get aggregate bonded transactions information
      description: |
        Gets an array of aggregate bonded transactions where the account is the sender
        or requires to cosign the transaction.
      operationId: partialTransactions
      parameters:
        - $ref: "#/components/parameters/publicKey"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of aggregate bonded transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{accountId}/restrictions/":
    get:
      tags:
        - Account routes
      summary: Get the account restrictions
      description: |
        Returns the account restrictions for a given account.
      operationId: getAccountRestrictions
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountRestrictionsInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /account/restrictions:
    post:
      tags:
        - Account routes
      summary: Get account restrictions for given array of addresses
      description: Returns the account restrictions for a given array of addresses.
      operationId: getAccountRestrictionsFromAccounts
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of account restrictions.
                items:
                  $ref: "#/components/schemas/AccountRestrictionsInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{accountId}/multisig":
    get:
      tags:
        - Account routes
      summary: Get multisig account information
      description: Returns the multisig account information.
      operationId: getAccountMultisig
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultisigAccountInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{accountId}/multisig/graph":
    get:
      tags:
        - Account routes
      summary: Get multisig account graph information
      description: Returns the multisig account graph.
      operationId: getAccountMultisigGraph
      parameters:
        - $ref: "#/components/parameters/accountId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultisigAccountGraphInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/blocks/{height}/limit/{limit}":
    get:
      tags:
        - Block routes
      summary: Get blocks information
      description: Gets up to limit number of blocks after given block height.
      operationId: getBlocksByHeightWithLimit
      parameters:
        - $ref: "#/components/parameters/height"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of blocks information.
                items:
                  $ref: "#/components/schemas/BlockInfoDTO"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/block/{height}":
    get:
      tags:
        - Block routes
      summary: Get block information
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      parameters:
        - $ref: "#/components/parameters/height"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/block/{height}/transactions":
    get:
      tags:
        - Block routes
      summary: Get transactions from a block
      description: Returns an array of transactions included in a block for a given block height.
      operationId: getBlockTransactions
      parameters:
        - $ref: "#/components/parameters/height"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/transactionIdLimit"
        - $ref: "#/components/parameters/ordering"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/block/{height}/transaction/{hash}/merkle":
    get:
      tags:
        - Block routes
      summary: Get the merkle path for a given a transaction and block
      description: |
        Returns the merkle path for a transaction included in a block.
        The path is the complementary data needed to calculate the merkle root.
        A client can compare if the calculated root equals the one recorded in the
        block header, verifying that the transaction was included in the block.
      operationId: getMerkleTransaction
      parameters:
        - $ref: "#/components/parameters/height"
        - $ref: "#/components/parameters/transactionHash"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerkleProofInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/block/{height}/receipts":
    get:
      tags:
        - Block routes
      summary: Get receipts from a block
      description: Returns the receipts linked to a block.
      operationId: getBlockReceipts
      parameters:
        - $ref: "#/components/parameters/height"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementsDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/block/{height}/receipt/{hash}/merkle":
    get:
      tags:
        - Block routes
      summary: Get the merkle path for a given a receipt statement hash and block
      description: |
        Returns the merkle path for a receipt statement orresolution linked to a
        block. The path is the complementary data needed to calculate the merkle
        root. A client can compare if the calculated root equals the one
        recorded in the block header, verifying that the receipt was linked with
        the block.
      operationId: getMerkleReceipts
      parameters:
        - $ref: "#/components/parameters/height"
        - $ref: "#/components/parameters/receiptHash"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerkleProofInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /chain/height:
    get:
      tags:
        - Chain routes
      summary: Get the current height of the chain
      description: Returns the current height of the blockchain.
      operationId: getBlockchainHeight
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeightInfoDTO"
  /chain/score:
    get:
      tags:
        - Chain routes
      summary: Get the current score of the chain
      description: |
        Gets the current score of the blockchain. The higher the score, the
        better the chain. During synchronization, nodes try to get the best
        blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

            block score = difficulty − time elapsed since last block
      operationId: getChainScore
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChainScoreDTO"
  /diagnostic/storage:
    get:
      tags:
        - Diagnostic routes
      summary: Get the storage information of the node
      description: Returns diagnostic information about the node storage.
      operationId: getDiagnosticStorage
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageInfoDTO"
  /diagnostic/server:
    get:
      tags:
        - Diagnostic routes
      summary: Get the version of the running rest component
      description: Returns the version of the running rest component.
      operationId: getServerInfo
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerDTO"
  "/mosaic/{mosaicId}":
    get:
      tags:
        - Mosaic routes
      summary: Get mosaic information
      description: Gets the mosaic definition for a given mosaicId.
      operationId: getMosaic
      parameters:
        - $ref: "#/components/parameters/mosaicId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MosaicInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref: "#/components/responses/InvalidArgument"
  /mosaic:
    post:
      tags:
        - Mosaic routes
      summary: Get mosaics information for an array of mosaics
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      requestBody:
        $ref: "#/components/requestBodies/mosaicIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of mosaics information.
                items:
                  $ref: "#/components/schemas/MosaicInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /mosaic/names:
    post:
      tags:
        - Mosaic routes
      summary: Get readable names for a set of mosaics
      description: Returns friendly names for mosaics.
      operationId: getMosaicsNames
      requestBody:
        $ref: "#/components/requestBodies/mosaicIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of mosaic names.
                items:
                  $ref: "#/components/schemas/MosaicNamesDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/namespace/{namespaceId}":
    get:
      tags:
        - Namespace routes
      summary: Get namespace information
      description: Gets the namespace for a given namespaceId.
      operationId: getNamespace
      parameters:
        - $ref: "#/components/parameters/namespaceId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NamespaceInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/account/{accountId}/namespaces":
    get:
      tags:
        - Namespace routes
      summary: Get namespaces owned by an account
      description: Gets an array of namespaces for a given account address.
      operationId: getNamespacesFromAccount
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/namespaceIdLimit"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of namespaces information.
                items:
                  $ref: "#/components/schemas/NamespaceInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /account/namespaces:
    post:
      tags:
        - Namespace routes
      summary: Get namespaces for given array of addresses
      description: Gets namespaces for a given array of addresses.
      operationId: getNamespacesFromAccounts
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of namespaces information.
                items:
                  $ref: "#/components/schemas/NamespaceInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /account/names:
    post:
      tags:
        - Account routes
      summary:  Get readable names for a set of accountIds.
      description: Returns friendly names for accounts.
      operationId: getAccountsNames
      requestBody:
        $ref: "#/components/requestBodies/accountIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of account names.
                items:
                  $ref: "#/components/schemas/AccountNamesDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /namespace/names:
    post:
      tags:
        - Namespace routes
      summary: Get readable names for a set of namespaces
      description: Returns friendly names for namespaces.
      operationId: getNamespacesNames
      requestBody:
        $ref: "#/components/requestBodies/namespaceIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of namespace names.
                items:
                  $ref: "#/components/schemas/NamespaceNameDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/transaction/{transactionId}":
    get:
      tags:
        - Transaction routes
      summary: Get transaction information
      description: Returns transaction information given a transactionId or hash.
      operationId: getTransaction
      parameters:
        - $ref: "#/components/parameters/transactionId"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInfoDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /transaction:
    post:
      tags:
        - Transaction routes
      summary: Get transactions information
      description: Returns transactions information for a given array of transactionIds.
      operationId: getTransactions
      requestBody:
        $ref: "#/components/requestBodies/transactionIds"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions information.
                items:
                  $ref: "#/components/schemas/TransactionInfoDTO"
        "400":
          $ref: "#/components/responses/InvalidArgument"
        "409":
          $ref: "#/components/responses/InvalidArgument"
    put:
      tags:
        - Transaction routes
      summary: Announce a new transaction
      description: |
        Announces a transaction to the network. We recommended to use the
        NEM2-SDK to announce transactions as they should be serialized.
      operationId: announceTransaction
      requestBody:
        $ref: "#/components/requestBodies/transactionPayload"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /transaction/partial:
    put:
      tags:
        - Transaction routes
      summary: Announce an aggregate bonded transaction
      description: Announces an aggregate bonded transaction to the network.
      operationId: announcePartialTransaction
      requestBody:
        $ref: "#/components/requestBodies/transactionPayload"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /transaction/cosignature:
    put:
      tags:
        - Transaction routes
      summary: Announce a cosignature transaction
      description: Announces a cosignature transaction to the network.
      operationId: announceCosignatureTransaction
      requestBody:
        $ref: "#/components/requestBodies/cosignature"
      responses:
        "202":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnounceTransactionInfoDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  "/transaction/{hash}/status":
    get:
      tags:
        - Transaction routes
      summary: Get transaction status
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      parameters:
        - $ref: "#/components/parameters/transactionHash"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionStatusDTO"
        "404":
          $ref: "#/components/responses/ResourceNotFound"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /transaction/statuses:
    post:
      tags:
        - Transaction routes
      summary: Get transactions status.
      description: Returns an array of transaction statuses for a given array of
        transaction hashes.
      operationId: getTransactionsStatuses
      requestBody:
        $ref: "#/components/requestBodies/transactionHashes"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: array
                description: Array of transactions status.
                items:
                  $ref: "#/components/schemas/TransactionStatusDTO"
        "400":
          $ref : "#/components/responses/InvalidContent"
        "409":
          $ref : "#/components/responses/InvalidArgument"
  /network:
    get:
      tags:
        - Network routes
      summary: Get the current network type of the chain
      description: Returns the current network type.
      operationId: getNetworkType
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NetworkTypeDTO"
  /node/info:
    get:
      tags:
        - Node routes
      summary: Get the node information
      description: |
        Supplies additional information about the application running on a node.
      operationId: getNodeInfo
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeInfoDTO"
  /node/time:
    get:
      tags:
        - Node routes
      summary: Get the node time
      description: Gets the node time at the moment the reply was sent and received.
      operationId: getNodeTime
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NodeTimeDTO"
externalDocs:
  description: NEM Developer Center
  url: https://nemtech.github.io/
servers:
  - url: http://localhost:3000
components:
  parameters:
    accountId:
      name: accountId
      in: path
      description: Public key or address of the account.
      required: true
      schema:
        type: string
    transactionHash:
      name: hash
      in: path
      description: Hash of the transaction.
      required: true
      schema:
        $ref: "#/components/schemas/Hash256"
    height:
      name: height
      in: path
      description: Height of the block. If height -1 is not a multiple of the limit
        provided, the inferior closest multiple + 1 is used instead.
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
    limit:
      name: limit
      in: path
      description: Number of elements to be returned.
      required: true
      schema:
        type: integer
        format: int32
        enum:
          - 25
          - 50
          - 75
          - 100
    mosaicId:
      name: mosaicId
      in: path
      description: Identifier of the mosaic.
      required: true
      schema:
        type: string
        format: hex
    namespaceId:
      name: namespaceId
      in: path
      description: Identifier of the namespace.
      required: true
      schema:
        type: string
        format: hex
    ordering:
      name: ordering
      in: query
      description: |
        Ordering criteria:
        * -id - Descending order by id.
        * id - Ascending order by id.
      schema:
        type: string
        default: -id
    publicKey:
      name: publicKey
      in: path
      description: Public key of the account.
      required: true
      schema:
        $ref: "#/components/schemas/PublicKey"
    pageSize:
      name: pageSize
      in: query
      description: Number of transactions to return for each request.
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 100
        default: 10
    receiptHash:
      name: hash
      in: path
      description: Hash of the receipt.
      required: true
      schema:
        $ref: "#/components/schemas/Hash256"
    transactionId:
      name: transactionId
      in: path
      description: Identifier of the transaction or hash.
      required: true
      schema:
        type: string
    transactionIdLimit:
      name: id
      in: query
      description: |
        Transaction identifier up to which transactions are returned.
      schema:
        type: string
    namespaceIdLimit:
      name: id
      in: query
      description: |
        Namespace identifier up to which transactions are returned.
      schema:
        type: string
  requestBodies:
    accountIds:
      content:
        application/json:
          schema:
            type: object
            properties:
              publicKeys:
                type: array
                description: Array of public keys.
                items:
                  $ref: "#/components/schemas/PublicKey"
              addresses:
                type: array
                description: Array of addresses.
                items:
                  $ref: "#/components/schemas/Address"
      required: true
    cosignature:
      content:
        application/json:
          schema:
            type: object
            properties:
              parentHash:
                $ref: "#/components/schemas/Hash256"
              signature:
                $ref: "#/components/schemas/Signature"
              signer:
                $ref: "#/components/schemas/PublicKey"
      required: true
    mosaicIds:
      content:
        application/json:
          schema:
            type: object
            properties:
              mosaicIds:
                type: array
                description: Array of mosaic identifiers.
                items:
                  type: string
                  format: hex
                example:
                  - d525ad41d95fcf29
      required: true
    transactionPayload:
      content:
        application/json:
          schema:
            type: object
            properties:
              payload:
                type: string
                description: Transaction payload.
      required: true
    namespaceIds:
      content:
        application/json:
          schema:
            type: object
            properties:
              namespaceIds:
                type: array
                description: Array of namespace identifiers.
                items:
                  type: string
                  format: hex
                example:
                  - 84b3552d375ffa4b
      required: true
    transactionIds:
      content:
        application/json:
          schema:
            type: object
            properties:
              transactionIds:
                type: array
                description: Array of transaction ids.
                items:
                  type: string
                example:
                  - 59B8DA0F0CB2720001103922
                  - 59B8D8E60CB2720001103904
      required: true
    transactionHashes:
      content:
        application/json:
          schema:
            type: object
            properties:
              hashes:
                type: array
                description: Array of transaction hashes.
                items:
                  $ref: "#/components/schemas/Hash256"
      required: true
  schemas:
    # Generic types
    Address:
      type: string
      description: Address of the account decoded.
      example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
    Amount:
      type: array
      description: |
        Absolute amount. An amount of 123456789 (absolute) for a mosaic with
        divisibility 6 means 123.456789 (relative).
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    BlockDuration:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Difficulty:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    Hash256:
      type: string
      example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
    Height:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Importance:
      type: string
    PublicKey:
      type: string
      example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
    MosaicId:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    NamespaceId:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Score:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Signature:
      type: string
      description: Signature of the entity generated by the signer.
      example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
    Timestamp:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    UnresolvedAddress:
      type: string
      description: |
        Address of the account decoded. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
        regular address. Else (e.g. 0x91) it represents a namespace id which starts at byte 1.
      example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
    UnresolvedMosaicId:
      type: array
      description: |
        Identifier of the mosaic. If the most significant bit of byte 0 is set, a namespaceId (alias)
        is used instead of the real  mosaic identifier.
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    Mosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: "#/components/schemas/MosaicId"
        amount:
          $ref: "#/components/schemas/Amount"
    UnresolvedMosaic:
      type: object
      required:
        - id
        - amount
      properties:
        id:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        amount:
          $ref: "#/components/schemas/Amount"
    UInt64:
      type: array
      items:
        type: integer
        format: int64
      example:
        - lower
        - higher
    # Enumerations - Account
    AccountTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
      description: |
        * 0 - Unlinked.
        * 1 - Balance-holding account that is linked to a remote harvester account.
        * 2 - Remote harvester account that is linked to a balance-holding account.
        * 3 - Remote harvester eligible account that is unlinked.
    # Enumerations - Entity
    EntityTypeEnum:
      type: integer
      enum:
        - 16716
        - 16705
        - 16961
        - 16717
        - 16973
        - 16974
        - 17230
        - 16725
        - 16718
        - 16712
        - 16722
        - 16978
        - 16720
        - 16976
        - 17232
        - 16721
        - 16977
        - 16724
        - 32835
        - 33091
      description: |
        Type of entity:
        * 0x414C (16716 decimal) - AccountLinkTransaction.
        * 0x4141 (16705 decimal) - AggregateCompleteTransaction.
        * 0x4241 (16961 decimal) - AggregateBondedTransaction.
        * 0x414D (16717 decimal) - MosaicDefinitionTransaction.
        * 0x424D (16973 decimal) - MosaicSupplyChangeTransaction.
        * 0x424E (16974 decimal) - AddressAliasTransaction.
        * 0x434E (17230 decimal) - MosaicAliasTransaction.
        * 0x4155 (16725 decimal) - ModifyMultisigAccountTransaction.
        * 0x414E (16718 decimal) - RegisterNamespaceTransaction.
        * 0x4148 (16712 decimal) - HashLockTransaction.
        * 0x4152 (16722 decimal) - SecretLockTransaction.
        * 0x4252 (16978 decimal) - SecretProofTransaction.
        * 0x4150 (16720 decimal) - AccountAddressRestrictionTransaction.
        * 0x4250 (16976 decimal) - AccountMosaicRestrictionTransaction.
        * 0x4350 (17232 decimal) - AccountOperationRestrictionTransaction.
        * 0x4151 (16721 decimal) - MosaicGlobalRestrictionTransaction.
        * 0x4251 (16977 decimal) - MosaicAddressRestrictionTransaction.
        * 0x4154 (16724 decimal) - TransferTransaction.
        * 0x8043 (32835 decimal) - Nemesis block.
        * 0x8143 (33091 decimal) - Regular block.
    # Enumerations - Network
    NetworkTypeEnum:
      type: integer
      format: int32
      description: |
        Version of the entity. The higher byte represents the network
        identifier:
        * 0x68 (MAIN_NET) - Public main network.
        * 0x98 (TEST_NET) - Public test network.
        * 0x60 (MIJIN) - Private network.
        * 0x90 (MIJIN_TEST) - Private test network.
      example: 36867
    # Enumerations - Node
    RolesTypeEnum:
      type: integer
      format: int32
      enum:
        - 1
        - 2
      description: |
        Role of the node:
        * 1 - Peer node.
        * 2 - Api node.
      example: 2
    # Enumerations - AccountLink
    LinkActionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of action:
        * 0 - Link.
        * 1 - Unlink.
    # Enumerations - LockSecret
    HashAlgorithmEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
      description: |
        Algorithm used to hash te proof:
        * 0 (Op_Sha3_256) - Proof is hashed using sha3 256.
        * 1 (Op_Keccak_256) - Proof is hashed using Keccak (ETH compatibility).
        * 2 (Op_Hash_160) - Proof is hashed twice: first with Sha-256 and then with RIPEMD-160 (bitcoin’s OP_HASH160).
        * 3 (Op_Hash_256) - Proof is hashed twice with Sha-256 (bitcoin’s OP_HASH256).

    # Enumerations - Mosaic
    MosaicPropertyIdEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
      description: |
        Identifier of the mosaic property:
        * 0 - MosaicFlags
        * 1 - Divisibility
        * 2 - Duration
      example: 0
    MosaicSupplyChangeDirectionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Direction of mosaic supply change:
        * 0  - Decrease.
        * 1  - Increase.
      example: 0
    # Enumerations - Multisig
    MultisigModificationTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of modification:
        * 0 - Add cosignatory.
        * 1 - Remove cosignatory.
      example: 0
    # Enumerations - Namespace
    AliasActionEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Alias action:
        * 0 - Link alias.
        * 1 - Unlink alias.
      example: 0
    AliasTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
      description: |
        Type of alias:
        * 0 - No alias.
        * 1 - Mosaic id alias.
        * 2 - Addres alias.
      example: 0
    NamespaceTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of namespace:
        * 0 - Root namespace.
        * 1 - Subnamespace.
      example: 0
    # Enumerations - Receipt
    ReceiptTypeEnum:
      type: integer
      format: int32
      enum:
        - 4685
        - 4942
        - 8515
        - 8776
        - 9042
        - 12616
        - 12626
        - 16717
        - 16718
        - 16974
        - 20803
        - 57652
        - 61763
        - 62019
      description: |
        Type of receipt:
        * 0x124D (4685 decimal) - Mosaic_Rental_Fee.
        * 0x134E (4942 decimal) - Namespace_Rental_Fee.
        * 0x2143 (8515 decimal) - Harvest_Fee.
        * 0x2248 (8776 decimal) - LockHash_Completed.
        * 0x2348 (9032 decimal) - LockHash_Expired.
        * 0x2252 (8786 decimal) - LockSecret_Completed.
        * 0x2352 (9042 decimal) - LockSecret_Expired.
        * 0x3148 (12616 decimal) - LockHash_Created.
        * 0x3152 (12626 decimal) - LockSecret_Created.
        * 0x414D (16717 decimal) - Mosaic_Expired.
        * 0x414E (16718 decimal) - Namespace_Expired.
        * 0x424E (16974 decimal) - Namespace_Deleted.
        * 0x5143 (20803 decimal) - Inflation.
        * 0xE134 (57652 decimal) - Transaction_Group.
        * 0xF143 (61763 decimal) - Address_Alias_Resolution.
        * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution.
    BalanceTransferReceiptDTO:
      type: object
      description: Invisible state change that triggered a mosaic transfer.
      allOf:
        - $ref: "#/components/schemas/ReceiptDTO"
        - type: object
          required:
            - sender
            - recipient
            - mosaicId
            - amount
          properties:
            sender:
              type: string
              description: Public key of the sender.
              example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
            recipient:
              type: string
              description: Public key of the recipient.
              example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
            mosaicId:
              $ref: "#/components/schemas/MosaicId"
            amount:
              $ref: "#/components/schemas/Amount"
    BalanceChangeReceiptDTO:
      type: object
      description: Invisible state change that changed an account balance.
      allOf:
        - $ref: "#/components/schemas/ReceiptDTO"
        - type: object
          required:
            - account
            - mosaicId
            - amount
          properties:
            account:
              type: string
              description: Public key of the target account.
              example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
            mosaicId:
              $ref: "#/components/schemas/MosaicId"
            amount:
              $ref: "#/components/schemas/Amount"
    ArtifactExpiryReceiptDTO:
      type: object
      description: An artifact namespace or mosaic expired.
      allOf:
        - $ref: "#/components/schemas/ReceiptDTO"
        - type: object
          required:
            - artifactId
          properties:
            artifactId:
              anyOf:
                - $ref: "#/components/schemas/NamespaceId"
                - $ref: "#/components/schemas/MosaicId"
    InflationReceiptDTO:
      type: object
      description: Native currency mosaics that were created due to inflation.
      allOf:
        - $ref: "#/components/schemas/ReceiptDTO"
        - type: object
          required:
            - mosaicId
            - amount
          properties:
            mosaicId:
              $ref: "#/components/schemas/MosaicId"
            amount:
              $ref: "#/components/schemas/Amount"
    # Enumerations - RestrictionAccount
    AccountRestrictionTypeEnum:
      type: integer
      format: int32
      example: 1
      enum:
        - 1
        - 2
        - 5
        - 65
        - 68
        - 129
        - 130
        - 193
        - 196
      description: |
        Type of account restriction:
        * 0x01 (1 decimal) - Allow only incoming transactions from a given address.
        * 0x02 (2 decimal) - Allow only incoming transactions containing a given mosaic identifier.
        * 0x05 (5 decimal) - Account restriction sentinel.
        * 0x41 (65 decimal) - Allow only outgoing transactions to a given address.
        * 0x44 (68 decimal) - Allow only outgoing transactions with a given transaction type.
        * 0x81 (129 decimal) - Block incoming transactions from a given address.
        * 0x82 (130 decimal) - Block incoming transactions containing a given mosaic identifier.
        * 0xC1 (193 decimal) - Block outgoing transactions to a given address.
        * 0xC4 (196 decimal) - Block outgoing transactions with a given transaction type.
    AccountRestrictionModificationTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
      description: |
        Type of account restriction modification:
        * 0 - Add property.
        * 1 - Remove property.
      example: 0
    # Enumerations - RestrictionMosaic
    MosaicRestrictionTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      description: |
        Type of mosaic restriction.
        * 0 - Uninitialized value indicating no restriction.
        * 1(EQ) - Allow if equal.
        * 2 (NE) - Allow if not equal.
        * 3 (LT) - Allow if less than.
        * 4 (LE) - Allow if less than or equal.
        * 5 (GT) - Allow if greater than.
        * 6 (GE) - Allow if greater than or equal.
    # Enumerations - Transfer
    MessageTypeEnum:
      type: integer
      format: int32
      enum:
        - 0
      description: |
        Type of message:
        * 0 - Regular message.
        * 1 - Encrypted message.
      example: 0
    # Schemas - Account
    AccountInfoDTO:
      type: object
      required:
        - meta
        - account
      properties:
        meta:
          $ref: "#/components/schemas/AccountMetaDTO"
        account:
          $ref: "#/components/schemas/AccountDTO"
    AccountMetaDTO:
      type: object
    AccountDTO:
      type: object
      required:
        - address
        - addressHeight
        - publicKey
        - publicKeyHeight
        - accountType
        - linkedAccountKey
        - activityBuckets
        - mosaics
        - importance
        - importanceHeight
      properties:
        address:
          $ref: "#/components/schemas/Address"
        addressHeight:
          $ref: "#/components/schemas/Height"
        publicKey:
          $ref: "#/components/schemas/PublicKey"
        publicKeyHeight:
          $ref: "#/components/schemas/Height"
        accountType:
          $ref: "#/components/schemas/AccountTypeEnum"
        linkedAccountKey:
          type: string
        activityBuckets:
          type: array
          items:
            type: object
        mosaics:
          type: array
          description: |
            Mosaic units owned. The amount is represented in
            absolute amount. Thus a balance of 123456789 for a mosaic with
            divisibility 6 (absolute) means the account owns 123.456789.
          items:
            $ref: "#/components/schemas/Mosaic"
        importance:
          $ref: "#/components/schemas/Importance"
        importanceHeight:
          $ref: "#/components/schemas/Height"
    # Schemas - Block
    BlockInfoDTO:
      type: object
      required:
        - meta
        - block
      properties:
        meta:
          $ref: "#/components/schemas/BlockMetaDTO"
        block:
          $ref: "#/components/schemas/BlockDTO"
    BlockMetaDTO:
      type: object
      required:
        - hash
        - generationHash
        - totalFee
        - subCacheMerkleRoots
        - numTransactions
      properties:
        hash:
          $ref: "#/components/schemas/Hash256"
        generationHash:
          $ref: "#/components/schemas/Hash256"
        subCacheMerkleRoots:
          type: array
          items:
            $ref: "#/components/schemas/Hash256"
        totalFee:
          $ref: "#/components/schemas/Amount"
        numTransactions:
          type: integer
          format: int32
          example: 0
        numStatements:
          type: integer
          format: int32
          example: 1
    BlockDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/VerifiableEntityDTO"
        - $ref: "#/components/schemas/EntityDTO"
        - type: object
          required:
            - height
            - timestamp
            - difficulty
            - feeMultiplier
            - previousBlockHash
            - blockTransactionsHash
            - blockReceiptsHash
            - stateHash
            - beneficiary
          properties:
            height:
              $ref: "#/components/schemas/Height"
            timestamp:
              $ref: "#/components/schemas/Timestamp"
            difficulty:
              $ref: "#/components/schemas/Difficulty"
            feeMultiplier:
              type: integer
              format: int32
              description: Fee multiplier applied to transactions contained in block.
              example: 0
            previousBlockHash:
              $ref: "#/components/schemas/Hash256"
            blockTransactionsHash:
              $ref: "#/components/schemas/Hash256"
            blockReceiptsHash:
              $ref: "#/components/schemas/Hash256"
            stateHash:
              $ref: "#/components/schemas/Hash256"
            beneficiary:
              $ref: "#/components/schemas/PublicKey"
    HeightInfoDTO:
      type: object
      required:
        - height
      properties:
        height:
          $ref: "#/components/schemas/Height"
    # Schemas - Chain
    ChainScoreDTO:
      type: object
      required:
        - scoreHigh
        - scoreLow
      properties:
        scoreHigh:
          $ref: "#/components/schemas/Score"
        scoreLow:
          $ref: "#/components/schemas/Score"
    MerklePathItem:
      type: object
      properties:
        position:
          type: integer
          format: uint32
          example: 1
        hash:
          $ref: "#/components/schemas/Hash256"
    MerkleProofInfoDTO:
      type: object
      properties:
        merklePath:
          type: array
          description: Complementary data needed to calculate the merkle root.
          items:
            $ref: "#/components/schemas/MerklePathItem"
    # Schemas - Diagnostic
    ServerDTO:
      type: object
      required:
        - serverInfo
      properties:
        serverInfo:
          $ref: "#/components/schemas/ServerInfoDTO"
    ServerInfoDTO:
      type: object
      required:
        - restVersion
        - sdkVersion
      properties:
        restVersion:
          type: string
          example: 1.0.14
          description: catapult-rest component version.
        sdkVersion:
          type: string
          example: 0.7.14
          description: catapult-sdk component version.
    # Schemas - Entity
    EntityDTO:
      type: object
      required:
        - signer
        - version
        - type
      properties:
        signer:
          $ref: "#/components/schemas/PublicKey"
        version:
          $ref: "#/components/schemas/NetworkTypeEnum"
        type:
          $ref: "#/components/schemas/EntityTypeEnum"
    VerifiableEntityDTO:
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: "#/components/schemas/Signature"
    # Schemas - Network
    NetworkTypeDTO:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Name of the network.
          example: mijinTest
        description:
          type: string
          description: A short text describing the network.
          example: catapult development network
    # Schemas - Node
    StorageInfoDTO:
      type: object
      required:
        - numBlocks
        - numTransactions
        - numAccounts
      properties:
        numBlocks:
          type: integer
          format: int64
          description: Number of blocks stored.
          example: 245053
        numTransactions:
          type: integer
          format: int64
          description: Number of transactions stored.
          example: 58590
        numAccounts:
          type: integer
          format: int64
          description: Number of accounts created.
          example: 177
    NodeInfoDTO:
      type: object
      required:
        - publicKey
        - port
        - networkIdentifier
        - version
        - roles
        - host
        - friendlyName
      properties:
        publicKey:
          $ref: "#/components/schemas/PublicKey"
        port:
          type: integer
          description: Port used for the communication.
          format: int32
          example: 7900
        networkIdentifier:
          type: integer
          format: int32
          example: 144
        version:
          type: integer
          description: Version of the application.
          format: int32
          example: 0
        roles:
          $ref: "#/components/schemas/RolesTypeEnum"
        host:
          type: string
          description: IP address of the endpoint.
          example: 127.0.0.1
        friendlyName:
          type: string
          description: Name of the node.
          example: api-node-0
    CommunicationTimestampsDTO:
      type: object
      properties:
        sendTimestamp:
          $ref: "#/components/schemas/Timestamp"
        receiveTimestamp:
          $ref: "#/components/schemas/Timestamp"
    NodeTimeDTO:
      type: object
      required:
        - communicationTimestamps
      properties:
        communicationTimestamps:
          $ref: "#/components/schemas/CommunicationTimestampsDTO"
    # Schemas - Transaction
    AnnounceTransactionInfoDTO:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    TransactionStatusDTO:
      type: object
      required:
        - status
      properties:
        group:
          type: string
        status:
          type: string
        hash:
          $ref: "#/components/schemas/Hash256"
        deadline:
          $ref: "#/components/schemas/BlockDuration"
        height:
          $ref: "#/components/schemas/Height"
      example: 0
    TransactionMetaDTO:
      type: object
      required:
        - height
        - hash
        - merkleComponentHash
        - index
        - id
      properties:
        height:
          $ref: "#/components/schemas/Height"
        hash:
          $ref: "#/components/schemas/Hash256"
        merkleComponentHash:
          $ref: "#/components/schemas/Hash256"
        index:
          type: integer
          format: int32
        id:
          type: string
    TransactionInfoDTO:
      type: object
      required:
        - meta
        - transaction
      properties:
        meta:
          $ref: "#/components/schemas/TransactionMetaDTO"
        transaction:
          anyOf:
            - $ref: "#/components/schemas/AccountLinkTransactionDTO"
            - $ref: "#/components/schemas/AggregateCompleteTransactionDTO"
            - $ref: "#/components/schemas/AggregateBondedTransactionDTO"
            - $ref: "#/components/schemas/MosaicDefinitionTransactionDTO"
            - $ref: "#/components/schemas/MosaicSupplyChangeTransactionDTO"
            - $ref: "#/components/schemas/ModifyMultisigAccountTransactionDTO"
            - $ref: "#/components/schemas/RegisterNamespaceTransactionDTO"
            - $ref: "#/components/schemas/AddressAliasTransactionDTO"
            - $ref: "#/components/schemas/MosaicAliasTransactionDTO"
            - $ref: "#/components/schemas/HashLockTransactionDTO"
            - $ref: "#/components/schemas/SecretLockTransactionDTO"
            - $ref: "#/components/schemas/SecretProofTransactionDTO"
            - $ref: "#/components/schemas/AccountAddressRestrictionTransactionDTO"
            - $ref: "#/components/schemas/AccountMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/AccountOperationRestrictionTransactionDTO"
            - $ref: "#/components/schemas/GlobalMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/AddressMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/TransferTransactionDTO"
    EmbeddedTransactionMetaDTO:
      type: object
      required:
        - height
        - hash
        - merkleComponentHash
        - index
        - id
      properties:
        height:
          $ref: "#/components/schemas/Height"
        hash:
          $ref: "#/components/schemas/Hash256"
        merkleComponentHash:
          $ref: "#/components/schemas/Hash256"
        index:
          type: integer
          format: int32
        id:
          type: string
    EmbeddedTransactionInfoDTO:
      type: object
      required:
        - meta
        - transaction
      properties:
        meta:
          $ref: "#/components/schemas/EmbeddedTransactionMetaDTO"
        transaction:
          anyOf:
            - $ref: "#/components/schemas/EmbeddedAccountLinkTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedModifyMultisigAccountTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedRegisterNamespaceTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedAddressAliasTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedMosaicAliasTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedHashLockTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedSecretLockTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedSecretProofTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedAccountAddressRestrictionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedAccountMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedAccountOperationRestrictionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedGlobalMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedAddressMosaicRestrictionTransactionDTO"
            - $ref: "#/components/schemas/EmbeddedTransferTransactionDTO"
    TransactionBodyDTO:
      type: object
      required:
        - max_fee
        - deadline
      properties:
        max_fee:
          $ref: "#/components/schemas/Amount"
        deadline:
          $ref: "#/components/schemas/BlockDuration"
    TransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/VerifiableEntityDTO"
        - $ref: "#/components/schemas/EntityDTO"
        - $ref: "#/components/schemas/TransactionBodyDTO"
    EmbeddedTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EntityDTO"
        - $ref: "#/components/schemas/TransactionBodyDTO"
    # Schemas - Aggregate
    AggregateTransactionBodyDTO:
      type: object
      required:
        - cosignatures
        - transactions
      properties:
        cosignatures:
          type: array
          description: Array of transaction cosignatures.
          items:
            $ref: "#/components/schemas/CosignatureDTO"
        transactions:
          type: array
          description: Array of transactions initiated by different accounts.
          items:
            $ref: "#/components/schemas/EmbeddedTransactionInfoDTO"
    AggregateCompleteTransactionDTO:
      type: object
      description: Transaction to combine multiple transactions together.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AggregateTransactionBodyDTO"
    AggregateBondedTransactionDTO:
      type: object
      description: Transaction to combine multiple transactions together.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AggregateTransactionBodyDTO"
    CosignatureDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/VerifiableEntityDTO"
        - type: object
          required:
            - signer
          properties:
            signer:
              type: string
              description: Public key of the signer account.
              example: D799E559AB735A5E62187306E80C1679EE3E1170532280C968D974E351CB412F
    # Schemas - LockHash
    HashLockTransactionBodyDTO:
      type: object
      required:
        - mosaic
        - duration
        - hash
      properties:
        mosaic:
          $ref: "#/components/schemas/Mosaic"
        duration:
          $ref: "#/components/schemas/BlockDuration"
        hash:
          $ref: "#/components/schemas/Hash256"
    HashLockTransactionDTO:
      type: object
      description: Transaction to lock funds before sending an aggregate bonded transaction.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/HashLockTransactionBodyDTO"
    EmbeddedHashLockTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/HashLockTransactionDTO"
    SecretLockTransactionBodyDTO:
      type: object
      required:
        - duration
        - mosaicId
        - amount
        - hashAlgorithm
        - secret
        - recipient
      properties:
        duration:
          $ref: "#/components/schemas/BlockDuration"
        mosaicId:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        amount:
          $ref: "#/components/schemas/Amount"
        hashAlgorithm:
          $ref: "#/components/schemas/HashAlgorithmEnum"
        secret:
          type: string
          description: Proof hashed.
          example: 759DE013523D2C36F54BA184611AC887C6C994412E28B35221098E084050249B
        recipient:
          type: string
          description: Address of the recipient account decoded. This account will receive the funds once the
            transaction is unlocked.
          example: 90829855740901BAA6EF35C91CF00D0059212BF49FBAEC3277
    SecretLockTransactionDTO:
      type: object
      description: Transaction to sends mosaics to a recipient if the proof used is
        revealed. If the duration is reached, the locked funds go back to the
        sender of the transaction.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/SecretLockTransactionBodyDTO"
    EmbeddedSecretLockTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/SecretLockTransactionBodyDTO"
    # Schemas - LockSecret
    SecretProofTransactionBodyDTO:
      type: object
      required:
        - hashAlgorithm
        - secret
        - proof
      properties:
        hashAlgorithm:
          $ref: "#/components/schemas/HashAlgorithmEnum"
        secret:
          type: string
          description: Proof hashed.
          example: 759DE013523D2C36F54BA184611AC887C6C994412E28B35221098E084050249B
        recipient:
          type: string
          description: Address of the recipient account decoded. This account will receive the funds once the
            transaction is unlocked.
          example: 90829855740901BAA6EF35C91CF00D0059212BF49FBAEC3277
        proof:
          type: string
          description: Original random set of bytes.
    SecretProofTransactionDTO:
      type: object
      description: Transaction to reveal a proof.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/SecretProofTransactionBodyDTO"
    EmbeddedSecretProofTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/SecretProofTransactionBodyDTO"
    # Schemas - AccountLink
    AccountLinkTransactionBodyDTO:
      type: object
      required:
        - remoteAccountKey
        - linkAction
      properties:
        remoteAccountKey:
          type: string
          description: Public key of the remote account.
        linkAction:
          $ref: "#/components/schemas/LinkActionEnum"
    AccountLinkTransactionDTO:
      type: object
      description: Delegates the account importance score to a proxy account.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AccountLinkTransactionBodyDTO"
    EmbeddedAccountLinkTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AccountLinkTransactionBodyDTO"
    # Schemas - Mosaic
    MosaicMetaDTO:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    MosaicInfoDTO:
      type: object
      required:
        - meta
        - mosaic
      properties:
        meta:
          $ref: "#/components/schemas/MosaicMetaDTO"
        mosaic:
          $ref: "#/components/schemas/MosaicDefinitionDTO"
    MosaicDefinitionDTO:
      type: object
      required:
        - mosaicId
        - supply
        - height
        - owner
        - properties
        - revision
      properties:
        mosaicId:
          $ref: "#/components/schemas/MosaicId"
        supply:
          $ref: "#/components/schemas/Amount"
        height:
          $ref: "#/components/schemas/Height"
        owner:
          type: string
          description: Public key of the mosaic owner.
          example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
        revision:
          type: integer
          format: int32
          description: Number of definitions for the same mosaic.
          example: 1
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MosaicPropertyDTO"
    MosaicPropertyDTO:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MosaicPropertyIdEnum"
        value:
          $ref: "#/components/schemas/UInt64"
    MosaicDefinitionTransactionBodyDTO:
      type: object
      required:
        - mosaicNonce
        - mosaicId
        - properties
      properties:
        mosaicNonce:
          type: integer
          format: int32
          description: Random nonce used to generate the mosaic id.
          example: 0
        mosaicId:
          $ref: "#/components/schemas/MosaicId"
        properties:
          type: array
          items:
            $ref: "#/components/schemas/MosaicPropertyDTO"
    MosaicDefinitionTransactionDTO:
      type: object
      description: Transaction to create a new mosaic.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/MosaicDefinitionTransactionBodyDTO"
    EmbeddedMosaicDefinitionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/MosaicDefinitionTransactionBodyDTO"
    MosaicSupplyChangeTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - direction
        - delta
      properties:
        mosaicId:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        direction:
          $ref: "#/components/schemas/MosaicSupplyChangeDirectionEnum"
        delta:
          $ref: "#/components/schemas/Amount"
    MosaicSupplyChangeTransactionDTO:
      type: object
      description: Transaction to increase or decrease the supply of a mosaic.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/MosaicSupplyChangeTransactionBodyDTO"
    EmbeddedMosaicSupplyChangeTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/MosaicSupplyChangeTransactionBodyDTO"

    # Schemas - Multisig
    MultisigAccountGraphInfoDTO:
      type: object
      required:
        - level
        - multisigEntries
      properties:
        level:
          type: integer
          format: int32
          description: Level of the multisig account.
          example: 0
        multisigEntries:
          type: array
          description: Array of multisig accounts for this level.
          items:
            $ref: "#/components/schemas/MultisigAccountInfoDTO"
    MultisigAccountInfoDTO:
      type: object
      required:
        - multisig
      properties:
        multisig:
          $ref: "#/components/schemas/MultisigDTO"
    MultisigDTO:
      type: object
      required:
        - account
        - minApproval
        - minRemoval
        - cosignatories
        - multisigAccounts
      properties:
        account:
          type: string
          description: Public key of the account.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        accountAddress:
          type: string
          description: Address of the account decoded.
          example: 9081FCCB41F8C8409A9B99E485E0E28D23BD6304EF7215E01A
        minApproval:
          type: integer
          format: int32
          description: Number of signatures needed to approve a transaction.
          example: 2
        minRemoval:
          description: Number of signatures needed to remove a cosignatory.
          type: integer
          format: int32
          example: 1
        cosignatories:
          type: array
          description: Array of public keys of the cosignatory accounts.
          example:
            - 5D9513282B65A12A1B68DCB67DB64245721F7AE7822BE441FE813173803C512C
            - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          items:
            type: string
        multisigAccounts:
          type: array
          description: Array of multisig accounts where the account is cosignatory.
          example:
            - 565059F55E68F904214E8BE1D610B5BBEA4CE46CC13D246D45BC1DAE5D32A0D2
          items:
            type: string
    CosignatoryModificationDTO:
      type: object
      required:
        - modificationType
        - cosignatoryPublicKey
      properties:
        modificationType:
          $ref: "#/components/schemas/MultisigModificationTypeEnum"
        cosignatoryPublicKey:
          $ref: "#/components/schemas/PublicKey"
    ModifyMultisigAccountTransactionBodyDTO:
      type: object
      required:
        - minRemovalDelta
        - minApprovalDelta
        - modifications
      properties:
        minRemovalDelta:
          type: integer
          format: int32
          description: |
            Number of signatures needed to remove a cosignatory. If we are
            modifying an existing multisig account, this indicates the relative
            change of the minimum cosignatories.
          example: 1
        minApprovalDelta:
          type: integer
          format: int32
          description: |
            Number of signatures needed to approve a transaction. If we are
            modifying an existing multisig account, this indicates the relative
            change of the minimum cosignatories.
          example: 1
        modifications:
          type: array
          description: Array of cosignatory accounts to add or delete.
          items:
            $ref: "#/components/schemas/CosignatoryModificationDTO"
    ModifyMultisigAccountTransactionDTO:
      type: object
      description: Transaction to create or modify a multisig account.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/ModifyMultisigAccountTransactionBodyDTO"
    EmbeddedModifyMultisigAccountTransactionDTO:
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/ModifyMultisigAccountTransactionBodyDTO"
    # Schemas - Namespace
    AccountNamesDTO:
      type: object
      required:
        - address
        - names
      properties:
        address:
          $ref: "#/components/schemas/Address"
        names:
          type: array
          description: Account linked namespace names.
          example:
            - alias1
            - alias2
          items:
            type: string
    MosaicNamesDTO:
      type: object
      required:
        - mosaicId
        - names
      properties:
        mosaicId:
          $ref: "#/components/schemas/MosaicId"
        names:
          type: array
          description: Mosaic linked namespace names.
          example:
            - cat.currency
          items:
            type: string
    NamespaceMetaDTO:
      type: object
      required:
        - id
        - active
        - index
      properties:
        id:
          type: string
        active:
          type: boolean
        index:
          type: integer
          format: int32
    NamespaceInfoDTO:
      type: object
      required:
        - meta
        - namespace
      properties:
        meta:
          $ref: "#/components/schemas/NamespaceMetaDTO"
        namespace:
          $ref: "#/components/schemas/NamespaceDTO"
    NamespaceDTO:
      type: object
      required:
        - owner
        - ownerAddress
        - startHeight
        - endHeight
        - depth
        - level0
        - type
        - alias
        - parentId
      properties:
        owner:
          type: string
          description: Public key of the owner of the namespace.
          example: EFF9BC7472263D03EF6362B1F200FD3061BCD1BABE78F82119FB88811227CE85
        ownerAddress:
          type: string
          description: Address of the owner of the namespace decoded.
          example: 906CBD9B8EC88014F7A4181B00C1837646BD46E504E3D72C44
        startHeight:
          $ref: "#/components/schemas/Height"
        endHeight:
          $ref: "#/components/schemas/Height"
        depth:
          type: integer
          format: int32
          description: Level of the namespace.
          example: 1
        level0:
          $ref: "#/components/schemas/NamespaceId"
        level1:
          $ref: "#/components/schemas/NamespaceId"
        level2:
          $ref: "#/components/schemas/NamespaceId"
        type:
          $ref: "#/components/schemas/NamespaceTypeEnum"
        alias:
          $ref: "#/components/schemas/AliasDTO"
        parentId:
          $ref: "#/components/schemas/NamespaceId"
    NamespaceNameDTO:
      type: object
      required:
        - namespaceId
        - name
      properties:
        parentId:
          $ref: "#/components/schemas/NamespaceId"
        namespaceId:
          $ref: "#/components/schemas/NamespaceId"
        name:
          type: string
          description: Name of the namespace.
          example: cat
    AliasDTO:
      type: object
      required:
        - type
      properties:
        type:
          $ref: "#/components/schemas/AliasTypeEnum"
        mosaicId:
          $ref: "#/components/schemas/MosaicId"
        address:
          $ref: "#/components/schemas/Address"
    RegisterNamespaceTransactionBodyDTO:
      type: object
      required:
        - namespaceType
        - duration
        - namespaceId
        - name
        - parentId
      properties:
        namespaceType:
          $ref: "#/components/schemas/NamespaceTypeEnum"
        duration:
          $ref: "#/components/schemas/BlockDuration"
        namespaceId:
          $ref: "#/components/schemas/NamespaceId"
        name:
          type: string
          description: Name of the namespace.
        parentId:
          $ref: "#/components/schemas/NamespaceId"
    RegisterNamespaceTransactionDTO:
      type: object
      description: Transaction to create or renew a namespace.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/RegisterNamespaceTransactionBodyDTO"
    EmbeddedRegisterNamespaceTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/RegisterNamespaceTransactionBodyDTO"
    AddressAliasTransactionBodyDTO:
      type: object
      required:
        - aliasAction
        - namespaceId
        - address
      properties:
        aliasAction:
          $ref: "#/components/schemas/AliasActionEnum"
        namespaceId:
          $ref: "#/components/schemas/NamespaceId"
        address:
          $ref: "#/components/schemas/Address"
    AddressAliasTransactionDTO:
      type: object
      description: Transaction to link a namespace to an account.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AddressAliasTransactionBodyDTO"
    EmbeddedAddressAliasTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AddressAliasTransactionBodyDTO"
    MosaicAliasTransactionBodyDTO:
      type: object
      required:
        - aliasAction
        - namespaceId
        - mosaicId
      properties:
        aliasAction:
          $ref: "#/components/schemas/AliasActionEnum"
        namespaceId:
          $ref: "#/components/schemas/NamespaceId"
        mosaicId:
          $ref: "#/components/schemas/MosaicId"
    MosaicAliasTransactionDTO:
      type: object
      description: Transaction to link a namespace to a mosaic.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/MosaicAliasTransactionBodyDTO"
    EmbeddedMosaicAliasTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/MosaicAliasTransactionBodyDTO"
    # Schemas - Receipt
    StatementsDTO:
      type: object
      description: Collection of transaction statements and resolutions triggered for
        the block requested.
      required:
        - transactionStatements
        - addressResolutionStatements
        - mosaicResolutionStatements
      properties:
        transactionStatements:
          type: array
          description: Array of transaction statements for the block requested.
          items:
            $ref: "#/components/schemas/TransactionStatementDTO"
        addressResolutionStatements:
          type: array
          description: Array of address resolutions for the block requested.
          items:
            $ref: "#/components/schemas/ResolutionStatementDTO"
        mosaicResolutionStatements:
          type: array
          description: Array of mosaic resolutions for the block requested.
          items:
            $ref: "#/components/schemas/ResolutionStatementDTO"
    TransactionStatementDTO:
      type: object
      description: Collection of receipts related to a transaction.
      required:
        - height
        - source
        - receipts
      properties:
        height:
          $ref: "#/components/schemas/Height"
        source:
          $ref: "#/components/schemas/SourceDTO"
        receipts:
          type: array
          description: Array of receipts.
          items:
            anyOf:
              - $ref: "#/components/schemas/BalanceTransferReceiptDTO"
              - $ref: "#/components/schemas/BalanceChangeReceiptDTO"
              - $ref: "#/components/schemas/ArtifactExpiryReceiptDTO"
              - $ref: "#/components/schemas/InflationReceiptDTO"
    ResolutionStatementDTO:
      type: object
      description: A resolution statement keeps the relation between a namespace alias used
        in a transaction and the real address or mosaicId.
      required:
        - height
        - unresolved
        - resolutionEntries
      properties:
        height:
          $ref: "#/components/schemas/Height"
        unresolved:
          anyOf:
            - $ref: "#/components/schemas/UnresolvedMosaicId"
            - $ref: "#/components/schemas/UnresolvedAddress"
        resolutionEntries:
          type: array
          description: Array of resolution entries linked to the unresolved
            namespaceId. It is an array instead of a single UInt64 field since
            within one block the resolution might change for different sources
            due to alias related transactions.
          items:
            $ref: "#/components/schemas/ResolutionEntryDTO"
    ResolutionEntryDTO:
      type: object
      required:
        - source
        - resolved
      properties:
        source:
          $ref: "#/components/schemas/SourceDTO"
        resolved:
          anyOf:
            - $ref: "#/components/schemas/Address"
            - $ref: "#/components/schemas/MosaicId"
    SourceDTO:
      type: object
      description: Transaction that triggered the receipt.
      required:
        - primaryId
        - secondaryId
      properties:
        primaryId:
          type: integer
          format: int32
          description: Transaction index within the block.
          example: 1
        secondaryId:
          type: integer
          format: int32
          description: Transaction index inside within the aggregate transaction. If
            the transaction is not an inner transaction, then the secondary id
            is set to 0.
          example: 0
    ReceiptDTO:
      type: object
      required:
        - version
        - type
      properties:
        version:
          type: integer
          format: int32
          description: Version of the receipt.
        type:
          $ref: "#/components/schemas/ReceiptTypeEnum"
    # Schemas - RestrictionAccount
    AccountRestrictionsInfoDTO:
      type: object
      required:
        - accountRestrictions
      properties:
        accountRestrictions:
          $ref: "#/components/schemas/AccountRestrictionsDTO"
    AccountRestrictionsDTO:
      type: object
      required:
        - address
        - restrictions
      properties:
        address:
          $ref: "#/components/schemas/Address"
        restrictions:
          type: array
          items:
            $ref: "#/components/schemas/AccountRestrictionDTO"
    AccountRestrictionDTO:
      type: object
      required:
        - restrictionType
        - values
      properties:
        restrictionType:
          $ref: "#/components/schemas/AccountRestrictionTypeEnum"
        values:
          type: array
          description: Address, transaction type, or mosaic id to restrict.
          items:
            anyOf:
              - $ref: "#/components/schemas/UnresolvedAddress"
              - $ref: "#/components/schemas/EntityTypeEnum"
              - $ref: "#/components/schemas/UnresolvedMosaicId"
    AccountAddressRestrictionModificationDTO:
      type: object
      required:
        - modificationType
        - values
      properties:
        modificationType:
          $ref: "#/components/schemas/AccountRestrictionModificationTypeEnum"
        values:
          type: array
          description: Address to restrict.
          items:
              $ref: "#/components/schemas/UnresolvedAddress"
    AccountAddressRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionType
        - modifications
      properties:
        restrictionType:
          $ref: "#/components/schemas/AccountRestrictionTypeEnum"
        modifications:
          type: array
          items:
            $ref: "#/components/schemas/AccountAddressRestrictionModificationDTO"
    AccountAddressRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent incoming and outgoing transactions for a given a set of addresses.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AccountAddressRestrictionTransactionBodyDTO"
    EmbeddedAccountAddressRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AccountAddressRestrictionTransactionBodyDTO"
    AccountMosaicRestrictionModificationDTO:
      type: object
      required:
        - modificationType
        - values
      properties:
        modificationType:
          $ref: "#/components/schemas/AccountRestrictionModificationTypeEnum"
        values:
          type: array
          description: Identifier of the mosaic to restrict.
          items:
            $ref: "#/components/schemas/UnresolvedMosaicId"
    AccountMosaicRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionType
        - modifications
      properties:
        restrictionType:
          $ref: "#/components/schemas/AccountRestrictionTypeEnum"
        modifications:
          type: array
          items:
            $ref: "#/components/schemas/AccountMosaicRestrictionModificationDTO"
    AccountMosaicRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent incoming transactions containing a given set of mosaics.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO"
    EmbeddedAccountMosaicRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO"
    AccountOperationRestrictionModificationDTO:
      type: object
      required:
        - modificationType
        - values
      properties:
        modificationType:
          $ref: "#/components/schemas/AccountRestrictionModificationTypeEnum"
        values:
          type: array
          description: Identifier of the entity to restrict.
          items:
            $ref: "#/components/schemas/EntityTypeEnum"
    AccountOperationRestrictionTransactionBodyDTO:
      type: object
      required:
        - restrictionType
        - modifications
      properties:
        restrictionType:
          $ref: "#/components/schemas/AccountRestrictionTypeEnum"
        modifications:
          type: array
          items:
            $ref: "#/components/schemas/AccountOperationRestrictionModificationDTO"
    AccountOperationRestrictionTransactionDTO:
      type: object
      description: Transaction to prevent outgoing transactions by transaction type.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AccountOperationRestrictionTransactionBodyDTO"
    EmbeddedAccountOperationRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AccountOperationRestrictionTransactionBodyDTO"
    # Schemas - RestrictionMosaic
    AddressMosaicRestrictionTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - restrictionKey
        - targetAddress
        - previousRestrictionValue
        - newRestrictionValue
      properties:
        mosaicId:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        restrictionKey:
          $ref: "#/components/schemas/UInt64"
        targetAddress:
          type: string
          description: Address of the target account decoded.
        previousRestrictionValue:
          $ref: "#/components/schemas/UInt64"
        newRestrictionValue:
          $ref: "#/components/schemas/UInt64"
    AddressMosaicRestrictionTransactionDTO:
      type: object
      description: Transaction to set a restriction rule to an address.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/AddressMosaicRestrictionTransactionBodyDTO"
    EmbeddedAddressMosaicRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/AddressMosaicRestrictionTransactionBodyDTO"
    GlobalMosaicRestrictionTransactionBodyDTO:
      type: object
      required:
        - mosaicId
        - referenceMosaicId
        - restrictionKey
        - previousRestrictionValue
        - previousRestrictionType
        - newRestrictionValue
        - newRestrictionType
      properties:
        mosaicId:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        referenceMosaicId:
          $ref: "#/components/schemas/UnresolvedMosaicId"
        restrictionKey:
          $ref: "#/components/schemas/UInt64"
        previousRestrictionValue:
          $ref: "#/components/schemas/UInt64"
        previousRestrictionType:
          $ref: "#/components/schemas/MosaicRestrictionTypeEnum"
        newRestrictionValue:
          $ref: "#/components/schemas/UInt64"
        newRestrictionType:
          $ref: "#/components/schemas/MosaicRestrictionTypeEnum"
    GlobalMosaicRestrictionTransactionDTO:
      type: object
      description: Transaction to set a network-wide restriction rule to a mosaic.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/GlobalMosaicRestrictionTransactionBodyDTO"
    EmbeddedGlobalMosaicRestrictionTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/GlobalMosaicRestrictionTransactionBodyDTO"
    # Schemas - Transfer
    MessageDTO:
      type: object
      required:
        - type
        - payload
      properties:
        type:
          $ref: "#/components/schemas/MessageTypeEnum"
        payload:
          type: string
          description: Content of the message in hexadecimal.
    TransferTransactionBodyDTO:
      type: object
      required:
        - recipient
        - mosaics
        - message
      properties:
        recipient:
          type: string
          description: Address of the recipiend account decoded. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
            regular address. Else (e.g. 0x91) it represents a namespace id which
            starts at byte 1.
          example: 909B5339654B16CF86F55EAEB1C8708A033286B3EBB314A792
        mosaics:
          type: array
          description: Array of mosaics sent to the recipient. If the most significant
            bit of byte 0 is set, a namespaceId (alias) is used instead of a
            instead of a mosaicId corresponds to a mosaicId.
          items:
            $ref: "#/components/schemas/Mosaic"
        message:
          $ref: "#/components/schemas/MessageDTO"
    TransferTransactionDTO:
      type: object
      description: Transaction to transfer mosaics and a message to another account.
      allOf:
        - $ref: "#/components/schemas/TransactionDTO"
        - $ref: "#/components/schemas/TransferTransactionBodyDTO"
    EmbeddedTransferTransactionDTO:
      type: object
      allOf:
        - $ref: "#/components/schemas/EmbeddedTransactionDTO"
        - $ref: "#/components/schemas/TransferTransactionBodyDTO"
  responses:
    ResourceNotFound:
      description: ResourceNotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidContent:
      description: InvalidContent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidArgument:
      description: InvalidArgument
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
